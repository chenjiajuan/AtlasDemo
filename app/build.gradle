group='tvtaobao.com.atlasdome'
version = getEnvValue("versionName", "1.0.2");
def apVersion = getEnvValue("apVersion", "");
apply plugin: 'com.android.application'
apply plugin: 'com.taobao.atlas'

repositories {
    mavenLocal()
    jcenter()
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId "tvtaobao.com.atlasdome"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
atlas {
    atlasEnabled true
    tBuildConfig {
        autoStartBundles = ['tvtaobao.com.homebundle'] //自启动bundle配置
        outOfApkBundles = ['remotebundle'] //配置不需要打包到apk的插件
        preLaunch = 'tvtaobao.com.atlasdome.AtlasdemoPreLaunch'
        classInject false
        dataBindingBundles = ['com.taobao.databindbundle']
    }
    manifestOptions {
        addAtlasProxyComponents true
    }
    patchConfigs {
        debug {
            createTPatch true
        }
    }
    buildTypes {
        debug {
            if (apVersion) {
                baseApDependency "${group}:AP-debug:${apVersion}@ap"
                patchConfig patchConfigs.debug
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile('com.taobao.android:atlas_core:5.0.7.30@aar') {
        transitive = true
    }

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile rootProject.ext.dependencies.appcompatV7
    testCompile rootProject.ext.dependencies.junit
    compile rootProject.ext.dependencies.fastjson
    compile rootProject.ext.dependencies.atlasupdate

    bundleCompile project(':homebundle')
    bundleCompile project(':remotebundle')
    bundleCompile project(':librarybundle')
}

String getEnvValue(key, defValue) {
    def val = System.getProperty(key);
    if (null != val) {
        return val;
    }
    val = System.getenv(key);
    if (null != val) {
        return val;
    }
    return defValue;
}


apply plugin: 'maven'
apply plugin: 'maven-publish'

publishing {
    repositories {
        mavenLocal()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact "${project.buildDir}/outputs/apk/${project.name}-debug.ap"
            artifactId "AP-debug"
        }
    }
}
